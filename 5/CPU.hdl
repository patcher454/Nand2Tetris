// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
	    Not(in=instruction[15], out=notInstruction);
        Mux16(a=outAlu, b=instruction, sel=notInstruction, out=address);
        Or(a=notInstruction, b=instruction[5], out=setAddress);
        ARegister(in=address, load=setAddress, out=outAddress, out[0..14]=addressM);
    
        And(a=instruction[15], b=instruction[4], out=setData);
        DRegister(in=outAlu, load=setData, out=outData);
    
        Mux16(a=outAddress, b=inM, sel=instruction[12], out=outAddressOrMemory);
    
        ALU(x=outData, y=outAddressOrMemory, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outAlu, out=outM,  zr=outZr, ng=outNg);
        
        And(a=instruction[15], b=instruction[3], out=writeM);
    
        And(a=outNg, b=instruction[2], out=JLE);
        And(a=outZr, b=instruction[1], out=JEQ);
        Not(in=outNg, out=notOutNg);
        Not(in=outZr, out=notOutZr);
        And(a=notOutNg, b=notOutZr, out=j0);
        And(a=j0, b=instruction[0], out=JGT);
        Or(a=JLE, b=JEQ, out=j1);
        Or(a=j1, b=JGT, out=JMP);
    
        And(a=JMP, b=instruction[15], out=jump);
    
        PC(in=outAddress, load=jump, inc=true, reset=reset, out[0..14]=pc);
}